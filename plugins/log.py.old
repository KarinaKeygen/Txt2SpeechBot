# -*- coding: utf-8 -*-
# @Author: gmm96


import telebot              # API bot library
from telebot import types   # API bot types
import sys 
sys.path.append("/home/gmm/telegramBots/Txt2SpeechBot/")
from plugins.file_processing import *
from plugins.shared import *
import time



##
## @brief  Records id of users who message around the bot
##
## @param  m     message object
##

def record_uid_messages(m):
   global USERS
   if m.from_user.username not in USERS:
       USERS[m.from_user.username] = m.from_user.id
       write_file('json', 'data/users.json', USERS)



##
## @brief  Saves bot around activity in log file
##
## @param  m     message object
##

def record_log_messages(m):
   if m.content_type == 'text':
      message = time.strftime("%d/%m/%y %H:%M:%S") + " | " 
      if m.chat.id > 0:                                            # Conversaci√≥n privada
         message += str(user_name(m.from_user)) + " (" + str(m.chat.id) + "): " + m.text
      else:                                                        # Grupos
         message += user_name(m.from_user) + '(' + str(m.from_user.id) + ') in "' + m.chat.title + '"[' + str(m.chat.id) + ']: ' + m.text

      print(message)
      with open('log.txt', 'a') as __log:
         __log.write(message + "\n")



##
## @brief  Records id of users who query the bot
##
## @param  q     query object
##

def record_uid_queries(q):
    global USERS
    if q.from_user.username not in USERS:
        USERS[q.from_user.username] = q.from_user.id
        write_file('json', 'data/users.json', USERS)



##
## @brief  Saves bot queries in log file
##
## @param  q     query object
##

def record_log_queries(q):
    query = time.strftime("%d/%m/%y %H:%M:%S") + " | " + str(user_name(q.from_user)) + " (" + str(q.from_user.id) + "): " + q.query
    print(query)
    with open('log.txt', 'a') as __log:
        __log.write(query + "\n")



##
## @brief  Records an exception in log file
##
## @param  em     exception message
##

def record_exception(em):
   with open('log.txt', 'a') as __log:
      __log.write(em + '\n')


##
## @brief  Returns the username
##
## @param  user     user object
##
## @return  Username if available, full name otherwise
##
def user_name(user):
    return user.username  